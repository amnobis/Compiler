/* Helper/Utility Functions for my Compiler */

public class HelperFunctions
{
	public static int ExpressionType(String expr)
	{
		/* return 0 for an assign expression
		 * 
		 *
		 */
		if(CountOccurancesOf("+", expr) == 0 && CountOccurancesOf("-", expr) == 0 && CountOccurancesOf("*", expr) == 0 && CountOccurancesOf("/", expr) == 0)
		{
			return 0;
		}
		else
		{
			return 1;
		}
	}

	public static int ExpressionType(StringBuilder expr)
	{
		if(CountOccurancesOf('+', expr) == 0 && CountOccurancesOf('-', expr) == 0 && CountOccurancesOf('*', expr) == 0 && CountOccurancesOf('/', expr) == 0)
		{
			return 0;
		}
		else
		{
			return 1;
		}
	}

	public static boolean isInteger(String input)
	{
		try
		{
			Integer.parseInt(input);
			return true;
		}
		catch(Exception e)
		{
			return false;
		}
	}

	public static boolean IsFloat(String input)
	{
		if(!input.contains("."))
		{

		}
		try
		{
			Double.parseDouble(input);
			return true;
		}
		catch(Exception e)
		{
			return false;
		}
	}

	public static int CountOccurancesOf(String s, String line)
	{
		return (line.length() - line.replace(s, "").length());
	}

	public static int CountOccurancesOf(char s, StringBuilder builder)
	{
		int count = 0;
		for (int i = 0; i < builder.length(); i++)
		{
			char c = builder.charAt(i);
			if(c == s)
			{
				count ++;
			}
		}
		return count;
	}

	public static StringBuilder ReduceOne(StringBuilder builder, int TempCounter)
	{
		for (int i = 0; i < builder.length(); i++)
		{
			char c = builder.charAt(i);
			if(c == '*' || c == '/')
			{
				builder.delete(i-1, i+2);
				builder.insert(i-1, "$T"+String.valueOf(TempCounter));
			}
		}
		return builder;
	}

	public static StringBuilder ReduceTwo(StringBuilder builder, int TempCounter)
	{
		for (int i = 0; i < builder.length(); i++)
		{
			char c = builder.charAt(i);
			if(c == '+' || c == '-')
			{
				if(Character.isLetter(builder.charAt(i)))
				{
					builder.delete(i-1, i+2);
					builder.insert(i-1, "$T"+String.valueOf(TempCounter));
				}
				else
				{
					if(TempCounter < 10)
					{
						builder.delete(i-3, i+2);
						builder.insert(i-3, "$T"+String.valueOf(TempCounter));
					}
					else
					{
						builder.delete(i-4, i+2);
						builder.insert(i-4, "$T"+String.valueOf(TempCounter));
					}
				}
			}
		}
		return builder;
	}

}
